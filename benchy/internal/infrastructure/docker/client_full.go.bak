package docker

import (
	"context"
	"fmt"
	"io"
	"strings"

	"benchy/internal/domain/entities"
	"encoding/json"
	"benchy/internal/domain/ports"
	"github.com/docker/docker/api/types"
	"github.com/docker/docker/api/types/container"
	"github.com/docker/docker/api/types/network"
	"github.com/docker/docker/client"
	"github.com/docker/go-connections/nat"
)

// DockerClient implémente l'interface DockerService
type DockerClient struct {
	client *client.Client
}

// NewDockerClient crée un nouveau client Docker
func NewDockerClient() (*DockerClient, error) {
	cli, err := client.NewClientWithOpts(client.FromEnv, client.WithAPIVersionNegotiation())
	if err != nil {
		return nil, fmt.Errorf("failed to create docker client: %w", err)
	}

	return &DockerClient{
		client: cli,
	}, nil
}

// CreateContainer crée un nouveau container
func (dc *DockerClient) CreateContainer(ctx context.Context, node *entities.Node, config ports.ContainerConfig) (string, error) {
	// Convertir les ports
	exposedPorts := make(nat.PortSet)
	portBindings := make(nat.PortMap)
	
	for hostPort, containerPort := range config.Ports {
		port, err := nat.NewPort("tcp", containerPort)
		if err != nil {
			return "", fmt.Errorf("invalid port %s: %w", containerPort, err)
		}
		
		exposedPorts[port] = struct{}{}
		portBindings[port] = []nat.PortBinding{
			{
				HostIP:   "0.0.0.0",
				HostPort: hostPort,
			},
		}
	}

	// Convertir les volumes
	binds := make([]string, 0, len(config.Volumes))
	for hostPath, containerPath := range config.Volumes {
		binds = append(binds, fmt.Sprintf("%s:%s", hostPath, containerPath))
	}

	// Configuration du container
	containerConfig := &container.Config{
		Image:        config.Image,
		Cmd:          config.Command,
		Env:          config.Environment,
		ExposedPorts: exposedPorts,
		Labels:       config.Labels,
		WorkingDir:   "/data",
	}

	// Configuration de l'hôte
	hostConfig := &container.HostConfig{
		PortBindings: portBindings,
		Binds:        binds,
		AutoRemove:   false,
		RestartPolicy: container.RestartPolicy{
			Name: "unless-stopped",
		},
	}

	// Configuration du réseau
	networkConfig := &network.NetworkingConfig{}
	if config.NetworkMode != "" {
		networkConfig.EndpointsConfig = map[string]*network.EndpointSettings{
			config.NetworkMode: {},
		}
	}

	// Créer le container
	resp, err := dc.client.ContainerCreate(
		ctx,
		containerConfig,
		hostConfig,
		networkConfig,
		nil,
		config.Name,
	)
	if err != nil {
		return "", fmt.Errorf("failed to create container: %w", err)
	}

	return resp.ID, nil
}

// StartContainer démarre un container
func (dc *DockerClient) StartContainer(ctx context.Context, containerID string) error {
	if err := dc.client.ContainerStart(ctx, containerID, types.ContainerStartOptions{}); err != nil {
		return fmt.Errorf("failed to start container %s: %w", containerID, err)
	}
	return nil
}

// StopContainer arrête un container
func (dc *DockerClient) StopContainer(ctx context.Context, containerID string) error {
	timeout := 30 // 30 secondes
	if err := dc.client.ContainerStop(ctx, containerID, container.StopOptions{Timeout: &timeout}); err != nil {
		return fmt.Errorf("failed to stop container %s: %w", containerID, err)
	}
	return nil
}

// RestartContainer redémarre un container
func (dc *DockerClient) RestartContainer(ctx context.Context, containerID string) error {
	timeout := 30 // 30 secondes
	if err := dc.client.ContainerRestart(ctx, containerID, container.StopOptions{Timeout: &timeout}); err != nil {
		return fmt.Errorf("failed to restart container %s: %w", containerID, err)
	}
	return nil
}

// RemoveContainer supprime un container
func (dc *DockerClient) RemoveContainer(ctx context.Context, containerID string) error {
	if err := dc.client.ContainerRemove(ctx, containerID, types.ContainerRemoveOptions{
		Force: true,
	}); err != nil {
		return fmt.Errorf("failed to remove container %s: %w", containerID, err)
	}
	return nil
}

// GetContainerInfo récupère les informations d'un container
func (dc *DockerClient) GetContainerInfo(ctx context.Context, containerID string) (*ports.ContainerInfo, error) {
	inspect, err := dc.client.ContainerInspect(ctx, containerID)
	if err != nil {
		return nil, fmt.Errorf("failed to inspect container %s: %w", containerID, err)
	}

	// Extraire les ports
	var portList []string
	for port := range inspect.Config.ExposedPorts {
		portList = append(portList, string(port))
	}

	// Extraire les réseaux
	var networkList []string
	for networkName := range inspect.NetworkSettings.Networks {
		networkList = append(networkList, networkName)
	}

	info := &ports.ContainerInfo{
		ID:       inspect.ID,
		Name:     strings.TrimPrefix(inspect.Name, "/"),
		Status:   inspect.State.Status,
		Image:    inspect.Config.Image,
		Ports:    portList,
		Networks: networkList,
	}

	return info, nil
}

// GetContainerLogs récupère les logs d'un container
func (dc *DockerClient) GetContainerLogs(ctx context.Context, containerID string, tail int) ([]string, error) {
	options := types.ContainerLogsOptions{
		ShowStdout: true,
		ShowStderr: true,
		Tail:       fmt.Sprintf("%d", tail),
	}

	logs, err := dc.client.ContainerLogs(ctx, containerID, options)
	if err != nil {
		return nil, fmt.Errorf("failed to get container logs: %w", err)
	}
	defer logs.Close()

	// Lire les logs
	logData, err := io.ReadAll(logs)
	if err != nil {
		return nil, fmt.Errorf("failed to read logs: %w", err)
	}

	// Diviser en lignes
	lines := strings.Split(string(logData), "\n")
	
	// Nettoyer les lignes vides
	var cleanLines []string
	for _, line := range lines {
		if strings.TrimSpace(line) != "" {
			cleanLines = append(cleanLines, strings.TrimSpace(line))
		}
	}

	return cleanLines, nil
}

// IsContainerRunning vérifie si un container est en cours d'exécution
func (dc *DockerClient) IsContainerRunning(ctx context.Context, containerID string) (bool, error) {
	inspect, err := dc.client.ContainerInspect(ctx, containerID)
	if err != nil {
		return false, fmt.Errorf("failed to inspect container: %w", err)
	}

	return inspect.State.Running, nil
}

// CreateNetwork crée un réseau Docker
func (dc *DockerClient) CreateNetwork(ctx context.Context, networkName string) error {
	// Vérifier si le réseau existe déjà
	networks, err := dc.client.NetworkList(ctx, types.NetworkListOptions{})
	if err != nil {
		return fmt.Errorf("failed to list networks: %w", err)
	}

	for _, net := range networks {
		if net.Name == networkName {
			// Le réseau existe déjà
			return nil
		}
	}

	// Créer le réseau
	_, err = dc.client.NetworkCreate(ctx, networkName, types.NetworkCreate{
		Driver: "bridge",
		IPAM: &network.IPAM{
			Config: []network.IPAMConfig{
				{
					Subnet: "172.20.0.0/16",
				},
			},
		},
	})
	if err != nil {
		return fmt.Errorf("failed to create network %s: %w", networkName, err)
	}

	return nil
}

// RemoveNetwork supprime un réseau Docker
func (dc *DockerClient) RemoveNetwork(ctx context.Context, networkName string) error {
	if err := dc.client.NetworkRemove(ctx, networkName); err != nil {
		return fmt.Errorf("failed to remove network %s: %w", networkName, err)
	}
	return nil
}

// ConnectToNetwork connecte un container à un réseau
func (dc *DockerClient) ConnectToNetwork(ctx context.Context, containerID, networkName string) error {
	if err := dc.client.NetworkConnect(ctx, networkName, containerID, nil); err != nil {
		return fmt.Errorf("failed to connect container %s to network %s: %w", containerID, networkName, err)
	}
	return nil
}

// GetContainerStats récupère les statistiques d'un container
func (dc *DockerClient) GetContainerStats(ctx context.Context, containerID string) (*ports.ContainerStats, error) {
	stats, err := dc.client.ContainerStats(ctx, containerID, false)
	if err != nil {
		return nil, fmt.Errorf("failed to get container stats: %w", err)
	}
	defer stats.Body.Close()

	// Lire les statistiques
	var containerStats types.StatsJSON
	if err := json.NewDecoder(stats.Body).Decode(&containerStats); err != nil {
		return nil, fmt.Errorf("failed to decode stats: %w", err)
	}

	// Calculer l'utilisation CPU
	cpuUsage := calculateCPUUsage(containerStats)
	
	// Extraire l'utilisation mémoire
	memoryUsage := containerStats.MemoryStats.Usage
	memoryLimit := containerStats.MemoryStats.Limit

	// Extraire les statistiques réseau
	var networkRX, networkTX uint64
	for _, netStats := range containerStats.Networks {
		networkRX += netStats.RxBytes
		networkTX += netStats.TxBytes
	}

	result := &ports.ContainerStats{
		CPUUsage:    cpuUsage,
		MemoryUsage: memoryUsage,
		MemoryLimit: memoryLimit,
		NetworkRX:   networkRX,
		NetworkTX:   networkTX,
	}

	return result, nil
}

// calculateCPUUsage calcule le pourcentage d'utilisation CPU
func calculateCPUUsage(stats types.StatsJSON) float64 {
	if len(stats.PreCPUStats.CPUUsage.PercpuUsage) == 0 {
		return 0.0
	}

	cpuDelta := float64(stats.CPUStats.CPUUsage.TotalUsage - stats.PreCPUStats.CPUUsage.TotalUsage)
	systemDelta := float64(stats.CPUStats.SystemUsage - stats.PreCPUStats.SystemUsage)
	numberCPUs := float64(len(stats.CPUStats.CPUUsage.PercpuUsage))

	if systemDelta > 0.0 && cpuDelta > 0.0 {
		return (cpuDelta / systemDelta) * numberCPUs * 100.0
	}
	return 0.0
}
